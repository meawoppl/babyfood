import time


class DrillWriter:
    def __init__(self, pathOrFlo, fmt=(3, 3), units="METRIC", comment=None):
        """
        Takes in a file-like object, or path name and initializes
        a "DrillWriter" instance for writing .xln drill files.
        The file is opened initially, and a small header written,
        but a bulk of the tool/hole descriptions are only written
        when the finalize() call is made.  This allows holes of
        the same diameter to be coalesced into a single tool
        description, and a streamlined file be produced.
        """
        assert units in ["INCH", "METRIC"]
        self.fmt = fmt

        if hasattr(pathOrFlo, "write"):
            self.f = pathOrFlo
        else:
            self.f = open(pathOrFlo, "w")

        if comment is None:
            comment = "Autogenerated by babyfood by MRG on " + time.ctime()

        # Write the header
        self.f.write("M48\n")
        self.f.write(";" + comment + "\n")
        self.f.write(";FILE_FORMAT=%i:%i\n" % self.fmt)
        self.f.write(units + "\n")
        self.f.write(";TYPE=PLATED\n")

        self.holes = {}
        self.finalized = False

    def _fCheck(self):
        assert not self.finalized, "Already finalized"

    def _addHole(self, xLoc, yLoc, diameter):
        """
        Add a hole at the specified x,y location with the designated diameter.
        """
        self._fCheck()
        self.holes[diameter] = self.holes.get(diameter, []) + [(xLoc, yLoc)]

    def _fmtFloat(self, fl):
        # Round the decimal appropriately
        fl = round(fl, self.fmt[1])

        # Meet excillon silly formatting requirements
        b, a = self.fmt
        fmtString = "%+0" + str(b + a + 2) + "." + str(a) + "f"
        result = fmtString % fl
        result = result.replace("+", "")

        return result

    def _writeBody(self):
        # Write the tool descriptions
        uniqueHoleSizes = self._getUniqueHoleSizes()

        # MRG Hack: gerbv want to see at least 1 tool even if unused
        if len(uniqueHoleSizes) == 0:
            uniqueHoleSizes = [1]

        for n, holeSize in enumerate(sorted(self.holes.keys())):
            tCode = "T%i" % (n + 1)
            holeSizeStr = self._fmtFloat(holeSize)
            self.f.write(tCode + "F00S00C" + holeSizeStr + "\n")
        self.f.write("%\n")
        # End tool descriptions

        # Start hole descriptions
        for n, holeSize in enumerate(sorted(self.holes.keys())):
            self.f.write("T%i\n" % (n + 1))

            for xC, yC in self.holes.get(holeSize, []):
                xStr = "X" + self._fmtFloat(xC)
                yStr = "Y" + self._fmtFloat(yC)
                self.f.write(xStr + yStr + "\n")

    def finalize(self):
        """
        Write the header, tools, holes, and finish the file.
        """
        self._fCheck()
        self._writeTools()
        self._writeHoles()
        self.f.write("M30\n")
        self.f.close()
        self.finalized = True
